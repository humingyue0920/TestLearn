1.HTTP client就是模拟HTTP协议客户端的一种技术，可以发送post，get请求
HTTP client官方网站：hc.apache.org
1.新建moudal，chapter9
2.在pom文件中添加依赖
3.在Java中添加package，com.course.httpclient.demo
4.创建类，MyHttpclient
里面的代码我是真的没看懂

2.httpClient get方法实现
1.在第七章 startupwithcokkies文件中添加代码
该代码的主要作用是将cookie信息在返回结果中返回
将该文件启动，可在浏览器F12 application中看到cookie信息
疑问：仅仅只在response中添加了cookies返回信息，为何F12之后，request cookie中也有login true的信息
//在network那里看的cookies信息不准

9-3 配置优化方法
1.新建package com.course.httpClient.cookies
2.新建类 MyCookiesForget
3.在resourse下添加配置文件
文件名为application.properties
配置文件内代码自己写
引入知识点：非常简单实用的工具类
ResourseBundle对象，java.util包中自带的
private ResourseBundle bundle 轻松的将配置文件读取出来
bundle是个变量
ResourseBundle对象默认识别properties文件

public void beforeTest（）{
 bundle(对象) = ResourceBundle.getBundle（"application"，Locale.CHINA）  //给bundle赋上值了
 url = bundle.getString("test.url")
 }
 
 
 
遇到问题:返回回来的结果乱码

9-4  获取cookie信息
总是乱码,换个方式该怎么实现


9-5  携带cookie信息
1.声明一个私有变量,用来存储cookie信息 
private CookieStore store;
2.访问下一个请求
2.1 解决依赖问题
2.2 获取uri
2.3 进行拼接,获得完整的url

9-6  post方法的访问实战
目标：访问带cookies信息的post请求
post请求特点：request中带json参数且需要设置cookie
response返回回来有响应数据，返回的结果需要判断结果是否正确
1.创建类，MyCookieForPost  复制代码
2.新建方法
拼接最终的测试地址
String testUrl = this.url + uri;
声明一个client对象，用来进行方法是执行
// HttpClient client = new HttpClient();
CloseableHttpClient httpClient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();
声明一个方法，这个方法就是post
HttpPost post = new HttpPost(testUrl);
添加参数
添加json依赖
声明json对象
JSONObject param = new JSONObject();
param.put("name","huhansan");
param.put("age","18")
设置请求头信息 设置header信息
post.setHeader("content-type","application/json")
将参数信息添加到方法中
StringEntity entity = new StringEntity(param.toString."utf-8");  //抛出异常
post.setEntity(entity);
声明一个对象，来进行响应结果的存储
String result;
设置cookies信息
//client.setCookieStore(this.store);
执行post方法
HttpResponse response = client.execute(post)  //抛出异常
获取响应结果
result = EntityUtils.toString(response.getEntity(),"utf-8")
处理结果，就是判断返回结果是否符合预期
将返回的响应结果字符串转换为json对象
JSONObject resultjson = new JSONObject(result);
获取到结果值
String success = (String) resultjson.get("huhansan");  //直接强转，转成String
Sting status = (Sting) resultjson.get("status");

具体的判断返回结果值
Assert.assertEquals("success",success);
Assert.assertEquals("1",status);
前面是期望结果，后面是实际结果即接口返回的结果

还有哪些地方可以优化呢，比如头信息，如果是公用的，可以优化到一个工具方法中
获取到json格式转换
最重要优化，添加参数的优化


断点调试总结:https://www.cnblogs.com/yjd_hycf_space/p/7483471.html
注:踩的坑,返回结果中text不能与json混用


post接口实战:
1.类中定义全局变量，公用url
private String url;
定义私有变量，用来获取配置文件内容
private ResourceBundle bundle;
定义私有变量，用来存储cookie信息
private CookieStore store;

2.定义一个方法，在测试之前执行
@BeforeTest
public void beforeTest（）{
//定义一个变量，用来存储配置文件中的信息
bundle = ResourceBundle.getBundle("application",Locale.CHINA);  //注意的点，application代表文件名，无需再写后缀，bundle自动获取后缀名为properties文件
//疑问：Locale.CHINA具体作用是什么
//利用bundle获取文件中test.url的值，并赋给变量url
url = bundle.getString("test.url");
}

3.定义一个方法，用来获取cookie信息，并存储
@Test
public void getCookie(){
//定义一个变量，用来存储返回的响应结果
String result;
//获取配置文件中uri的值并拼接测试路径
String uri = bundle.getString("get.cookie")；
String testUrl = this.url + uri；

//逻辑代码书写
//利用HttpPost对象定义post方法
HttpPost post = new HttpPost();
//利用定义client对象，并存储cookie信息
CloseableHttpClient client = HttpClients.custom().setDefaultCookieStore(store).build();
//定义变量response，用来接收client执行post请求返回的结果
HttpResponse response = client.execute(post);

//以下代码是将返回结果转换为中文
StringBuffer buffer=new StringBuffer();
        if (response.getStatusLine().getStatusCode() == 200) {
            InputStream inStream = response.getEntity().getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, "gbk"));
            String line = "";
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            System.out.println(buffer.toString());
        }
        
        
//获取cookie信息
List<Cookie> cookielist = store.getCookies();
//for循环，将cookie的值打印出来
for(Cookie cookie:cookielist){
String name = cookie.getName();
String value = cookie.getValue();
System.out.println("cookie name ="+name+"cookie value = "+value);

}

}


//定义一个post请求，上一个接口返回的cookie值，该接口调用
//依赖于上一个接口
@Test(Dependent={"getCookie"})
public void testpostcookie(){
//定义uri，获取接口路径
String uri = bundle.getString("post.cookie");
//测试路径拼接
String testUrl = this.url + uri;


//逻辑书写
String result;
HttpPost post = new HttpPost(testUrl);
//设置domain和path
BasicClientCookie cookie = new BasicClientCookie(this.name,this.value);
cookie.setDomain("127.0.0.1");
cookie.setPath("/");
//设置client对象
CloseableHttpClient client = HttpClients.custom().setDefaultCookieStore(this.store).build;

//添加domain和path
this.store.addCookie(cookie);

//添加参数，在pom.xml中添加依赖，引入json对象
JSONObject param = new JSONObject();
param.put("name","huhansan");
param.put("age","18");
//设置请求头信息，设置header信息
post.setheader("content-type","application/json");
//将参数信息添加到请求中
StringEntity entity = new StringEntity(param.toString(),utf-8);
post.setEntity(entity);
//获取响应结果
HttpResponse response = client.execute(post);
result = EntityUtils.toString(response.getEntity(),"utf-8");

//将响应结果转换为json对象
JSONObject json=JSONObject.parseObject(result);

//获取响应结果中的json值
String sucesses = (String) resultjson.get("huhansan");
String status = (String) resultjson.get("status");

//将返回结果与预期结果做对比
Assert.assertEquals(sucesses,"sucesses");
Assert.assertEquals(status,"1");


}

