2019/3/9  周一
1.开户过程中，点击返回按钮，不做修改时，要求icbc库open_account表中step开户步骤不更新，实际开户步骤更新
2.从签订协议返回到评测答题，数据未回写
3.从验证手机号返回到签到协议，要求协议勾选，实际未勾选
4.开户过程中，点击返回按钮，要求td_vorcher库icbc_open表中open_state字段不更新，即使修改信息也不更新，以最大的为准  没找到在哪
5.开户结果12流程暂未走通
6.验证预留手机号验证码填写错误也可进入到下一页面  暂时不做
7.12步，开户失败原因未展示，展示成交易成功
8.开户失败的，退出开户，再次进入会变成开户成功

邀请好友发现bug
1.调用首拆接口，invite_round表中had_invite_count字段默认值应为0，实际为1  已修复，验证通过
2.调用首拆接口，同一个用户第3次参加活动，接口报405，Response message: Method Not Allowed
3.调用活动信息查询，未参与过活动的用户调用该接口返回信息massage应修改，将“首次参与”修改为“未参与过”


2020/3/10  周二
1.首拆接口调用不通
2.首拆20记录接口返回的手气最佳错误
3.首拆20记录接口未按照时间倒叙排序
4.首拆20记录接口缺少已领取个数
&& nick_name == nickname && photo == headImg 

服务端需要注意的:
1.invite_round表is_success定时任务的正确性
2.invite_round表is_success覆盖0,1,2,3,4
3.各个表中的比例是否会随着后台的变化而变化

下午新加需求
1.新的只在新的包上面展示
旧的只在旧的包上面展示
2.新的flag为1.old为0

<class name = "com.tester.cases.VoucherQueryTest">
                <methods>
                    <include name = "voucherQueryTrue"></include>
                </methods>
            </class>
            


           
2020/3/11 周三
接口测试成果
1.首拆接口,后面暂时调不通
2.活动信息查询接口未参与过的用户,接口返回提示信息不正确
3.注册送券新接口,为已经过期的人员助力有bug和roundid不存在时有bug
4.邀请记录，未倒叙排序，且未覆盖开户奖励，翻页怎么弄，要求每页展示30条
5.打款晒单接口，未按时间倒叙排序，且开户打款未覆盖到
6.首拆bug在jira上写了，首拆无数据未覆盖


2020/3/12  周四
1.打扫卫生 OK
2.解决值类型对比和字符串类型对比 还是没搞懂
3.石头剪刀布 OK
4.teamview  OK


今日发现bug:
2.注册送券新接口,为已经过期的人员助力有bug和roundid不存在时有bug
3.邀请记录：未覆盖开户奖励，翻页怎么弄，要求每页展示30条
4.打款晒单接口：开户打款未覆盖到
5.首拆20条记录接口无返回时未覆盖  ok
6.领取接口访问不通

服务端需要注意的:
1.invite_round表is_success定时任务的正确性
2.invite_round表is_success覆盖0,1,2,3,4  0进行中  1轮数过期  2领取过期 3待领取 4成功
3.各个表中的比例是否会随着后台的变化而变化  OK


2020/3/13  周五
1.teamview连接
2.需要的材料复制 OK
3.最近学到的几个函数方法用法整理 math.random(),Array.toString(),Math.abs(),Scanner
将一个乱排序的数组倒叙打印出来


1.开户过程中，点击返回按钮，不做修改时，要求icbc库open_account表中step开户步骤不更新，实际开户步骤更新
2.从签订协议返回到评测答题，数据未回写 ok
3.从验证手机号返回到签到协议，要求协议勾选，实际未勾选  ok
4.开户过程中，点击返回按钮，要求td_vorcher库icbc_open表中open_state字段不更新，即使修改信息也不更新，以最大的为准 ok
5.开户结果12流程暂未走通
6.验证预留手机号验证码填写错误也可进入到下一页面  暂无合适办法解决
7.12步，开户失败原因未展示，展示成交易成功
8.开户失败的，退出开户，再次进入会变成开户成功 ok


数组操作
1.遍历数组
1.1 利用for循环将数组遍历,利用for each将数组遍历
1.2 打印数组 Arras.toString() 括号中放置数组名称
1.3 练习:将一个乱序排序的数组按照倒叙排序 引入知识点:Arrays.sort() 括号中放置数组名称
2.数组排序(常用的排序算法有冒泡排序,插入排序和快速排序)
2.1 冒泡排序
N个数字要排序完成，总共进行N-1趟排序，每i趟的排序次数为(N-i)次，所以可以用双重循环语句，外层控制循环多少趟，内层控制每一趟的循环次数
2.2 练习
3.多维数组
3.1 二维数组
二维数组定义 int[][] ns = int new[]{{1,2,3},{1,2,4},{4}} 注意二维数组的三种定义方式
访问二维数组中的某个元素需要使用array[row][col] 注:下标从0开始
二维数组的每个元素长度并不要求相同
打印二维数组,利用嵌套循环,利用java标准库的Arrays.deepToString()
总共有三种方法:
        //1.利用for循环打印二维数组
//        int[][] ns = {
//                {1,2,3},
//                {2,3,4},
//                {5}
//        };
//        for (int i = 0; i < ns.length;i++){
//            for (int j = 0 ;j<ns[i].length;j++){
//                System.out.println(ns[i][j]);
//            }
//        }

        //2.利用for each循环打印二维数组
//        int[][] ns = {
//                {1,2,3},
//                {2,3,4},
//                {5}
//        };
//        for (int[] arr:ns){
//            for (int n :arr){
//                System.out.print(n);
//                System.out.print(',');
//            }
//        }

        //3.使用java标准库的Arrays.deepToString()
        int[][] ns = {
                {1,2,3},
                {2,3,4},
                {5}
        };
        System.out.println(Arrays.deepToString(ns));
3.2 三维数组
在实际应用中，除了二维数组在某些时候还能用得上，更高维度的数组很少使用
4.命令行参数
面向对象基础:
1.方法
1.1:一个类中可以定义多个变量,但是变量如果用public修饰,会将变量暴露给外部,破坏封装性
为了避免外部代码直接访问变量,我们可以用private修饰变量
1.2:思考,当外部不能访问这些定义的变量值时,那我们定义变量又有何意义呢
此处引入方法,在定义私有变量的类中添加方法,可以添加返回该值或设置该值的方法
1.3 定义方法语法
修饰符 方法返回类型 方法名(方法参数列表) {
    若干方法语句;
    return 方法返回值;
}
方法返回值通过return语句实现，如果没有返回值，返回类型设置为void，可以省略return


1.开户过程中，点击返回按钮，不做修改时，要求icbc库open_account表中step开户步骤不更新，实际开户步骤更新
开户步骤8和9未上报
2.开户结果12流程暂未走通
3.验证预留手机号验证码填写错误也可进入到下一页面  暂无合适办法解决
4.12步，开户失败原因未展示，首次进入展示"交易成功"返回后再次进入展示"原因未知"后续上线前都改成空白
5.返回后进入,点击重新开户,页面报错














